spring.application.name=gestao_vagas

# A propriedade spring.application.name permite que você dê um nome significativo à sua aplicação, facilitando a sua identificação e gestão em ambientes complexos. No seu caso, a aplicação chamada "gestao_vagas" pode ser facilmente identificada e diferenciada de outras aplicações ou serviços.

spring.datasource.url= jdbc:postgresql://localhost:5432/gestao_vagas
spring.datasource.username= igorn
spring.datasource.password= 08901

spring.jpa.properties.hibernate,dialect= org.hibernate.dislect.PostgreSQLDialect

# Significado: Esta propriedade especifica o dialeto do Hibernate que será usado para se comunicar com o banco de dados. O Hibernate é um framework de mapeamento objeto-relacional (ORM), e o dialeto é uma classe que traduz as instruções SQL geradas pelo Hibernate para a sintaxe específica do banco de dados que você está utilizando. No caso, org.hibernate.dialect.PostgreSQLDialect indica que o banco de dados é um PostgreSQL.

spring.jpa.hibernate.ddl-auto= update

#Significado: Esta propriedade controla a estratégia de gerenciamento do esquema do banco de dados pelo Hibernate. O valor update significa que o Hibernate vai atualizar o esquema do banco de dados para refletir as mudanças no mapeamento das entidades (classes Java). Aqui estão alguns dos valores possíveis para spring.jpa.hibernate.ddl-auto:

# none: O Hibernate não fará nada com o esquema do banco de dados.

# update: O Hibernate tentará atualizar o esquema do banco de dados para manter o esquema atualizado com as alterações nas entidades.

# create: O Hibernate criará o esquema do banco de dados, descartando dados existentes.

# create-drop: O Hibernate criará o esquema ao iniciar e o descartará ao finalizar.

# validate: O Hibernate apenas validará se o esquema do banco de dados está em conformidade com as entidades mapeadas, mas não fará nenhuma modificação.

spring.jpa.show-sql= true

# A propriedade spring.jpa.show-sql=true é uma configuração muito útil para desenvolvimento e depuração, pois permite que os desenvolvedores vejam o SQL gerado pelo JPA/Hibernate diretamente no console. Isso facilita a verificação e otimização das consultas, além de ajudar a entender melhor como o framework está interagindo com o banco de dados.
